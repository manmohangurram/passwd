// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class XChaCha20Bindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  XChaCha20Bindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  XChaCha20Bindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int crypto_stream_xchacha20_keybytes() {
    return _crypto_stream_xchacha20_keybytes();
  }

  late final _crypto_stream_xchacha20_keybytesPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'crypto_stream_xchacha20_keybytes');
  late final _crypto_stream_xchacha20_keybytes =
      _crypto_stream_xchacha20_keybytesPtr.asFunction<int Function()>();

  int crypto_stream_xchacha20_noncebytes() {
    return _crypto_stream_xchacha20_noncebytes();
  }

  late final _crypto_stream_xchacha20_noncebytesPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'crypto_stream_xchacha20_noncebytes');
  late final _crypto_stream_xchacha20_noncebytes =
      _crypto_stream_xchacha20_noncebytesPtr.asFunction<int Function()>();

  int crypto_stream_xchacha20_messagebytes_max() {
    return _crypto_stream_xchacha20_messagebytes_max();
  }

  late final _crypto_stream_xchacha20_messagebytes_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'crypto_stream_xchacha20_messagebytes_max');
  late final _crypto_stream_xchacha20_messagebytes_max =
      _crypto_stream_xchacha20_messagebytes_maxPtr.asFunction<int Function()>();

  int crypto_stream_xchacha20(
    ffi.Pointer<ffi.UnsignedChar> c,
    int clen,
    ffi.Pointer<ffi.UnsignedChar> n,
    ffi.Pointer<ffi.UnsignedChar> k,
  ) {
    return _crypto_stream_xchacha20(
      c,
      clen,
      n,
      k,
    );
  }

  late final _crypto_stream_xchacha20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('crypto_stream_xchacha20');
  late final _crypto_stream_xchacha20 = _crypto_stream_xchacha20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>)>();

  int crypto_stream_xchacha20_xor(
    ffi.Pointer<ffi.UnsignedChar> c,
    ffi.Pointer<ffi.UnsignedChar> m,
    int mlen,
    ffi.Pointer<ffi.UnsignedChar> n,
    ffi.Pointer<ffi.UnsignedChar> k,
  ) {
    return _crypto_stream_xchacha20_xor(
      c,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_stream_xchacha20_xorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('crypto_stream_xchacha20_xor');
  late final _crypto_stream_xchacha20_xor =
      _crypto_stream_xchacha20_xorPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>();

  int crypto_stream_xchacha20_xor_ic(
    ffi.Pointer<ffi.UnsignedChar> c,
    ffi.Pointer<ffi.UnsignedChar> m,
    int mlen,
    ffi.Pointer<ffi.UnsignedChar> n,
    int ic,
    ffi.Pointer<ffi.UnsignedChar> k,
  ) {
    return _crypto_stream_xchacha20_xor_ic(
      c,
      m,
      mlen,
      n,
      ic,
      k,
    );
  }

  late final _crypto_stream_xchacha20_xor_icPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.UnsignedLongLong,
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Uint64,
                  ffi.Pointer<ffi.UnsignedChar>)>>(
      'crypto_stream_xchacha20_xor_ic');
  late final _crypto_stream_xchacha20_xor_ic =
      _crypto_stream_xchacha20_xor_icPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<ffi.UnsignedChar>)>();

  void crypto_stream_xchacha20_keygen(
    ffi.Pointer<ffi.UnsignedChar> k,
  ) {
    return _crypto_stream_xchacha20_keygen(
      k,
    );
  }

  late final _crypto_stream_xchacha20_keygenPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedChar>)>>(
      'crypto_stream_xchacha20_keygen');
  late final _crypto_stream_xchacha20_keygen =
      _crypto_stream_xchacha20_keygenPtr
          .asFunction<void Function(ffi.Pointer<ffi.UnsignedChar>)>();

  int crypto_secretbox_xchacha20poly1305_keybytes() {
    return _crypto_secretbox_xchacha20poly1305_keybytes();
  }

  late final _crypto_secretbox_xchacha20poly1305_keybytesPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'crypto_secretbox_xchacha20poly1305_keybytes');
  late final _crypto_secretbox_xchacha20poly1305_keybytes =
      _crypto_secretbox_xchacha20poly1305_keybytesPtr
          .asFunction<int Function()>();

  int crypto_secretbox_xchacha20poly1305_noncebytes() {
    return _crypto_secretbox_xchacha20poly1305_noncebytes();
  }

  late final _crypto_secretbox_xchacha20poly1305_noncebytesPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'crypto_secretbox_xchacha20poly1305_noncebytes');
  late final _crypto_secretbox_xchacha20poly1305_noncebytes =
      _crypto_secretbox_xchacha20poly1305_noncebytesPtr
          .asFunction<int Function()>();

  int crypto_secretbox_xchacha20poly1305_macbytes() {
    return _crypto_secretbox_xchacha20poly1305_macbytes();
  }

  late final _crypto_secretbox_xchacha20poly1305_macbytesPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'crypto_secretbox_xchacha20poly1305_macbytes');
  late final _crypto_secretbox_xchacha20poly1305_macbytes =
      _crypto_secretbox_xchacha20poly1305_macbytesPtr
          .asFunction<int Function()>();

  int crypto_secretbox_xchacha20poly1305_messagebytes_max() {
    return _crypto_secretbox_xchacha20poly1305_messagebytes_max();
  }

  late final _crypto_secretbox_xchacha20poly1305_messagebytes_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'crypto_secretbox_xchacha20poly1305_messagebytes_max');
  late final _crypto_secretbox_xchacha20poly1305_messagebytes_max =
      _crypto_secretbox_xchacha20poly1305_messagebytes_maxPtr
          .asFunction<int Function()>();

  int crypto_secretbox_xchacha20poly1305_easy(
    ffi.Pointer<ffi.UnsignedChar> c,
    ffi.Pointer<ffi.UnsignedChar> m,
    int mlen,
    ffi.Pointer<ffi.UnsignedChar> n,
    ffi.Pointer<ffi.UnsignedChar> k,
  ) {
    return _crypto_secretbox_xchacha20poly1305_easy(
      c,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_secretbox_xchacha20poly1305_easyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.UnsignedLongLong,
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.UnsignedChar>)>>(
      'crypto_secretbox_xchacha20poly1305_easy');
  late final _crypto_secretbox_xchacha20poly1305_easy =
      _crypto_secretbox_xchacha20poly1305_easyPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>();

  int crypto_secretbox_xchacha20poly1305_open_easy(
    ffi.Pointer<ffi.UnsignedChar> m,
    ffi.Pointer<ffi.UnsignedChar> c,
    int clen,
    ffi.Pointer<ffi.UnsignedChar> n,
    ffi.Pointer<ffi.UnsignedChar> k,
  ) {
    return _crypto_secretbox_xchacha20poly1305_open_easy(
      m,
      c,
      clen,
      n,
      k,
    );
  }

  late final _crypto_secretbox_xchacha20poly1305_open_easyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.UnsignedLongLong,
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.UnsignedChar>)>>(
      'crypto_secretbox_xchacha20poly1305_open_easy');
  late final _crypto_secretbox_xchacha20poly1305_open_easy =
      _crypto_secretbox_xchacha20poly1305_open_easyPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>();

  int crypto_secretbox_xchacha20poly1305_detached(
    ffi.Pointer<ffi.UnsignedChar> c,
    ffi.Pointer<ffi.UnsignedChar> mac,
    ffi.Pointer<ffi.UnsignedChar> m,
    int mlen,
    ffi.Pointer<ffi.UnsignedChar> n,
    ffi.Pointer<ffi.UnsignedChar> k,
  ) {
    return _crypto_secretbox_xchacha20poly1305_detached(
      c,
      mac,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_secretbox_xchacha20poly1305_detachedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.UnsignedLongLong,
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.UnsignedChar>)>>(
      'crypto_secretbox_xchacha20poly1305_detached');
  late final _crypto_secretbox_xchacha20poly1305_detached =
      _crypto_secretbox_xchacha20poly1305_detachedPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>();

  int crypto_secretbox_xchacha20poly1305_open_detached(
    ffi.Pointer<ffi.UnsignedChar> m,
    ffi.Pointer<ffi.UnsignedChar> c,
    ffi.Pointer<ffi.UnsignedChar> mac,
    int clen,
    ffi.Pointer<ffi.UnsignedChar> n,
    ffi.Pointer<ffi.UnsignedChar> k,
  ) {
    return _crypto_secretbox_xchacha20poly1305_open_detached(
      m,
      c,
      mac,
      clen,
      n,
      k,
    );
  }

  late final _crypto_secretbox_xchacha20poly1305_open_detachedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.UnsignedLongLong,
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.UnsignedChar>)>>(
      'crypto_secretbox_xchacha20poly1305_open_detached');
  late final _crypto_secretbox_xchacha20poly1305_open_detached =
      _crypto_secretbox_xchacha20poly1305_open_detachedPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>();
}

final class max_align_t extends ffi.Opaque {}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

const int NULL = 0;

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int __GLIBC_USE_C2X_STRTOL = 1;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 38;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int _LIBC_LIMITS_H_ = 1;

const int MB_LEN_MAX = 16;

const int LLONG_MIN = -9223372036854775808;

const int LLONG_MAX = 9223372036854775807;

const int ULLONG_MAX = -1;

const int _BITS_POSIX1_LIM_H = 1;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_RE_DUP_MAX = 255;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int NGROUPS_MAX = 65536;

const int MAX_CANON = 255;

const int MAX_INPUT = 255;

const int NAME_MAX = 255;

const int PATH_MAX = 4096;

const int PIPE_BUF = 4096;

const int XATTR_NAME_MAX = 255;

const int XATTR_SIZE_MAX = 65536;

const int XATTR_LIST_MAX = 65536;

const int RTSIG_MAX = 32;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int PTHREAD_KEYS_MAX = 1024;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int AIO_PRIO_DELTA_MAX = 20;

const int DELAYTIMER_MAX = 2147483647;

const int TTY_NAME_MAX = 32;

const int LOGIN_NAME_MAX = 256;

const int HOST_NAME_MAX = 64;

const int MQ_PRIO_MAX = 32768;

const int SEM_VALUE_MAX = 2147483647;

const int SSIZE_MAX = 9223372036854775807;

const int _BITS_POSIX2_LIM_H = 1;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int COLL_WEIGHTS_MAX = 255;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int CHARCLASS_NAME_MAX = 2048;

const int RE_DUP_MAX = 32767;

const int SCHAR_MAX = 127;

const int SHRT_MAX = 32767;

const int INT_MAX = 2147483647;

const int LONG_MAX = 9223372036854775807;

const int SCHAR_MIN = -128;

const int SHRT_MIN = -32768;

const int INT_MIN = -2147483648;

const int LONG_MIN = -9223372036854775808;

const int UCHAR_MAX = 255;

const int USHRT_MAX = 65535;

const int UINT_MAX = 4294967295;

const int ULONG_MAX = -1;

const int CHAR_BIT = 8;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int SODIUM_SIZE_MAX = -1;

const int crypto_stream_xchacha20_KEYBYTES = 32;

const int crypto_stream_xchacha20_NONCEBYTES = 24;

const int crypto_stream_xchacha20_MESSAGEBYTES_MAX = -1;

const int crypto_secretbox_xchacha20poly1305_KEYBYTES = 32;

const int crypto_secretbox_xchacha20poly1305_NONCEBYTES = 24;

const int crypto_secretbox_xchacha20poly1305_MACBYTES = 16;

const int crypto_secretbox_xchacha20poly1305_MESSAGEBYTES_MAX = -17;
